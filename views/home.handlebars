{{! Use the main layout }}
{{!< main }}

{{! New Post Submission Form }}
<section class="content-container">
	<!-- Show the create post form when logged in -->
	{{#if loggedIn}}
		<section class="post-form">
			<form action="/posts" method="POST" enctype="multipart/form-data">
				<div id="profile-container">
					<img{{#if user.avatar_url}}
							src="{{user.avatar_url}}" alt="Profile Picture"
						{{else}}
							src="/images/default-avatar.png" alt="Default Profile Picture"
						{{/if}} class="profile-picture">
					<button type="button" id="emoji-button" onclick="toggleEmojiPanel()">ðŸ˜€</button>
					<input type="file" name="image">
				</div>
				<div id="input-container">
					{{#if titleError}}
						<p style="color: red;">{{titleError}}</p>
					{{/if}}
					<input type="text" name="title" placeholder="Title">
					<textarea type="text" name="content" placeholder="Content">{{content}}</textarea>
				</div>
				<div id="form-actions">
					<button type="submit" class="post-button">Post</button>
				</div>
			</form>

			<div id="emoji-container" class="emoji-panel" style="display: none;">
				<input id="emoji-search" type="text" name="emojiSearch" placeholder="Search Emoji">
				<div id="emoji-grid"></div>
			</div>
		</section>
	{{/if}}

	<section class="posts-list">
		<!-- recent posts -->
		{{#if posts.length}}
			<ul>
				{{#each posts}}
					<!-- Pass the user into posts -->
					{{> post this user=../user}}
				{{/each}}
			</ul>
		{{else}}
			<p>No one has posted yet!</p>
		{{/if}}
	</section>
</section>

{{! JavaScript for Emoji Integration }}
<script>
let allEmojis = [];  // Global list to hold all emojis

// Toggles the emoji panel visibility
function toggleEmojiPanel() {
	const container = document.getElementById('emoji-container');
	container.style.display = container.style.display === 'none' ? 'block' : 'none';

	if(container.style.display === 'block' && allEmojis.length == 0){
		// go "Fetch" you some emojis and show them off with displayEmojis
		try {
			fetch('/emoji', {
					method: 'GET',
				})
				.then(res => res.json())
				.then(emojis => {
					allEmojis = emojis;
					displayEmojis(allEmojis);
					})
		} catch (error) {
			console.log(error);
		}
	}
}

// Displays a maximum of 199 emojis in the grid
function displayEmojis(emojis, limit = 199) {
	const container = document.getElementById('emoji-grid');
	container.innerHTML = '';  // Clear previous results
	if (Array.isArray(emojis) && emojis.length > 0) {
		emojis.slice(0, limit).forEach(emoji => {
			const emojiElement = document.createElement('span');
			emojiElement.textContent = emoji.character || emoji.char; 
			emojiElement.title = emoji.unicodeName || emoji.name;
			emojiElement.style.cursor = 'pointer';
			emojiElement.onclick = () => insertEmoji(emoji.character || emoji.char);
			container.appendChild(emojiElement);
		});
	} else {
		container.textContent = 'No emojis found. Try a different search!';
	}
}

// Search for emojis based on the search term
function searchEmojis() {
	const searchTerm = document.getElementById('emoji-search').value.toLowerCase();
	// array.filter takes a predicate
	// use string.includes. 
	const filteredEmojis = allEmojis.filter(emoji => 
		(emoji.unicodeName && emoji.unicodeName.toLowerCase().includes(searchTerm)) || 
		(emoji.category && emoji.category.toLowerCase().includes(searchTerm))
	);
	console.log(filteredEmojis);
	displayEmojis(filteredEmojis);
}

// Insert an emoji into the textarea
function insertEmoji(emoji) {
	// put an emoji on a form somehow. 
	let textarea = document.querySelector('textarea[name="content"]');
	textarea.value = textarea.value + emoji;
	// do this when you're doing getting the emoji on the form
	textarea.focus();  // Keep focus on the textarea
}

// Event listener for emoji search
document.getElementById('emoji-search').addEventListener('input', function(e) {
	searchEmojis();
})
</script>